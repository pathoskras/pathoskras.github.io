// From http://bl.ocks.org/nitaku/d79632a53187f8e92b15/dc1b22049eed0a4922bf093e85601de053b37dc5
// Generated by CoffeeScript 1.4.0
// https://observablehq.com/@d3/draw-me

const SWATCH_D = 22

const renderLine = d3.line().x(function (d) {
  return d[0]
}).y(function (d) {
  return d[1]
}).curve(d3.curveBasis)

type DrawingData = {
  id: number;
  image: string;
  lines: any[];
  name: string;
}

class Drawer {
  backgroundImage: string;

  constructor(data : DrawingData) {
    this.paint(data);
  }

  /**
   * Erase & redraw the lines.
   */
  paint (drawingData : DrawingData) {
    d3.selectAll('#canvas g .line').remove()
    const lines = d3.select('#canvas g').selectAll('.line').data(drawingData.lines)
    lines.enter().append('path').attrs({
      class: 'line',
      stroke: function (d :any) {
        return d.color
      },
      d: function (d :any) {
        return renderLine(d.points)
      }
    }).each(function (d: any) {
      d.elem = d3.select(this)
      return d.elem
    })
    return lines.exit().remove()
  }

  drawImage = function() {
    console.log("drawing image");
  }
}


let drawingData = { // eslint-disable-line
  lines: []
}

let activeLine = null

let activeColor = '#333333'

const canvas = d3.select('#canvas')

const linesLayer = canvas.append('g')

const ui = d3.select('#ui')

const palette = ui.append('g').attrs({
  transform: 'translate(' + (4 + SWATCH_D / 2) + ',' + (4 + SWATCH_D / 2) + ')'
})

const swatches = palette.selectAll('.swatch').data(['#333333', '#ffffff', '#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'])

const trashBtn = ui.append('text').html('&#xf1f8;').attrs({
  class: 'btn',
  dy: '0.35em',
  transform: 'translate(940,20)'
}).on('click', function () {
  drawingData.lines = []
  return redraw()
})

swatches.enter().append('circle').attrs({
  stroke: 'grey',
  class: 'swatch',
  cx: function (d, i) {
    return i * (SWATCH_D + 4) / 2
  },
  cy: function (d, i) {
    if (i % 2) {
      return SWATCH_D
    } else {
      return 0
    }
  },
  r: SWATCH_D / 2,
  fill: function (d) {
    return d
  }
}).on('click', function (d) {
  activeColor = d
  palette.selectAll('.swatch').classed('active', false)
  return d3.select(this).classed('active', true)
})

swatches.each(function (d) {
  if (d === activeColor) {
    return d3.select(this).classed('active', true)
  }
})

const drag = d3.drag()

drag.on('start', function () {
  activeLine = {
    points: [],
    color: activeColor
  }
  drawingData.lines.push(activeLine)
  return redraw(activeLine)
})

drag.on('drag', function () {
  activeLine.points.push(d3.mouse(this))
  return redraw(activeLine)
})

drag.on('end', function () {
  if (activeLine.points.length === 0) {
    drawingData.lines.pop()
  }
  activeLine = null
  return console.log(drawingData)
})

canvas.call(drag)


function redraw (specificLine ?: any) {
  let lines
  lines = linesLayer.selectAll('.line').data(drawingData.lines)
  lines.enter().append('path').attrs({
    class: 'line',
    stroke: function (d) {
      return d.color
    }
  }).each(function (d) {
    d.elem = d3.select(this)
    return d.elem
  })
  if (specificLine != null) {
    specificLine.elem.attrs({
      d: function (d) {
        return renderLine(d.points)
      }
    })
  } else {
    lines.attrs({
      d: function (d) {
        return renderLine(d.points)
      }
    })
  }
  return lines.exit().remove()
}

redraw()
